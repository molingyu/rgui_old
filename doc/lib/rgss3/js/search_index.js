var search_data = {"index":{"searchIndex":["rgss3","audio","bitmap","color","graphics","input","plane","rgsserror","rgssreset","rect","sprite","table","tilemap","tone","viewport","window","[]()","[]=()","bgm_fade()","bgm_play()","bgm_pos()","bgm_stop()","bgs_fade()","bgs_play()","bgs_pos()","bgs_stop()","blt()","blur()","clear()","clear_rect()","close?()","dir4()","dir8()","dispose()","dispose()","dispose()","dispose()","dispose()","dispose()","dispose?()","disposed?()","disposed?()","disposed?()","disposed?()","disposed?()","draw_text()","empty()","fadein()","fadeout()","fill_rect()","flash()","flash()","frame_reset()","freeze()","get_pixel()","gradient_fill_rect()","height()","height()","height()","hue_change()","load_data()","me_fade()","me_play()","me_stop()","move()","msgbox()","msgbox_p()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","open?()","play_movie()","press?()","radial_blur()","rect()","repeat?()","resize()","resize_screen()","rgss_main()","rgss_stop()","save_data()","se_play()","se_stop()","set()","set()","set()","set_pixel()","setup_midi()","snap_to_bitmap()","stretch_blt()","text_size()","transition()","trigger?()","update()","update()","update()","update()","update()","update()","wait()","width()","width()","width()","xsize()","ysize()","zsize()"],"longSearchIndex":["rgss3","rgss3::audio","rgss3::bitmap","rgss3::color","rgss3::graphics","rgss3::input","rgss3::plane","rgss3::rgsserror","rgss3::rgssreset","rgss3::rect","rgss3::sprite","rgss3::table","rgss3::tilemap","rgss3::tone","rgss3::viewport","rgss3::window","rgss3::table#[]()","rgss3::table#[]=()","rgss3::audio::bgm_fade()","rgss3::audio::bgm_play()","rgss3::audio::bgm_pos()","rgss3::audio::bgm_stop()","rgss3::audio::bgs_fade()","rgss3::audio::bgs_play()","rgss3::audio::bgs_pos()","rgss3::audio::bgs_stop()","rgss3::bitmap#blt()","rgss3::bitmap#blur()","rgss3::bitmap#clear()","rgss3::bitmap#clear_rect()","rgss3::window#close?()","rgss3::input::dir4()","rgss3::input::dir8()","rgss3::bitmap#dispose()","rgss3::plane#dispose()","rgss3::sprite#dispose()","rgss3::tilemap#dispose()","rgss3::viewport#dispose()","rgss3::window#dispose()","rgss3::bitmap#dispose?()","rgss3::plane#disposed?()","rgss3::sprite#disposed?()","rgss3::tilemap#disposed?()","rgss3::viewport#disposed?()","rgss3::window#disposed?()","rgss3::bitmap#draw_text()","rgss3::rect#empty()","rgss3::graphics::fadein()","rgss3::graphics::fadeout()","rgss3::bitmap#fill_rect()","rgss3::sprite#flash()","rgss3::viewport#flash()","rgss3::graphics::frame_reset()","rgss3::graphics::freeze()","rgss3::bitmap#get_pixel()","rgss3::bitmap#gradient_fill_rect()","rgss3::bitmap#height()","rgss3::graphics::height()","rgss3::sprite#height()","rgss3::bitmap#hue_change()","rgss3#load_data()","rgss3::audio::me_fade()","rgss3::audio::me_play()","rgss3::audio::me_stop()","rgss3::window#move()","rgss3#msgbox()","rgss3#msgbox_p()","rgss3::bitmap::new()","rgss3::color::new()","rgss3::plane::new()","rgss3::rect::new()","rgss3::sprite::new()","rgss3::table::new()","rgss3::tilemap::new()","rgss3::tone::new()","rgss3::viewport::new()","rgss3::window::new()","rgss3::window#open?()","rgss3::graphics::play_movie()","rgss3::input::press?()","rgss3::bitmap#radial_blur()","rgss3::bitmap#rect()","rgss3::input::repeat?()","rgss3::table#resize()","rgss3::graphics::resize_screen()","rgss3#rgss_main()","rgss3#rgss_stop()","rgss3#save_data()","rgss3::audio::se_play()","rgss3::audio::se_stop()","rgss3::color#set()","rgss3::rect#set()","rgss3::tone#set()","rgss3::bitmap#set_pixel()","rgss3::audio::setup_midi()","rgss3::graphics::snap_to_bitmap()","rgss3::bitmap#stretch_blt()","rgss3::bitmap#text_size()","rgss3::graphics::transition()","rgss3::input::trigger?()","rgss3::graphics::update()","rgss3::input::update()","rgss3::sprite#update()","rgss3::tilemap#update()","rgss3::viewport#update()","rgss3::window#update()","rgss3::graphics::wait()","rgss3::bitmap#width()","rgss3::graphics::width()","rgss3::sprite#width()","rgss3::table#xsize()","rgss3::table#ysize()","rgss3::table#zsize()"],"info":[["RGSS3","","RGSS3.html","","<p>RGSS（Ruby Game Scripting System），也就是「Ruby游戏脚本系统」 使用面向对象脚本语言 Ruby 来开发\nWindows® 平台的2D游戏。 RGSS3 即RGSS系列的第三代产品。（对应的 …\n"],["RGSS3::Audio","","RGSS3/Audio.html","","<p>执行音乐和声音处理的模块。\n"],["RGSS3::Bitmap","","RGSS3/Bitmap.html","","<p>位图类。位图表示图像的数据。 在画面上显示位图，必须使用精灵（Sprite）之类的对象。 超类：Object。\n"],["RGSS3::Color","","RGSS3/Color.html","","<p>RGBA 颜色的类。每个成分以浮点数（Float）管理。 超类：Object。\n"],["RGSS3::Graphics","","RGSS3/Graphics.html","","<p>该模块负责画面整体的处理。\n"],["RGSS3::Input","","RGSS3/Input.html","","<p>处理手柄、键盘输入的模块。 在 RGSS3 中，使用符号而非按键序号来管理。\n"],["RGSS3::Plane","","RGSS3/Plane.html","","<p>平面的类。平面是将位图的图案在整个画面上平铺显示的特殊精灵，用于显示远景图等。 超类：Object。\n"],["RGSS3::RGSSError","","RGSS3/RGSSError.html","","<p>通知 RGSS 内部异常的异常类。 一般在尝试存取已经释放的 Bitmap 或 Sprite 类的对象时抛出。 超类：StandardError。\n"],["RGSS3::RGSSReset","","RGSS3/RGSSReset.html","","<p>通知游戏执行时按下 F12 键的异常类。 由 RGSS2 之前的隐藏类 Reset 更名而来。 超类：Exception。\n"],["RGSS3::Rect","","RGSS3/Rect.html","","<p>矩形的类。 超类：Object。\n"],["RGSS3::Sprite","","RGSS3/Sprite.html","","<p>精灵的类。精灵是为了在游戏画面上显示角色等图像的基本概念。 超类：Object。\n"],["RGSS3::Table","","RGSS3/Table.html","","<p>多维数组的类。每个元素都是带符号的两字节整数，也就是 -32,768~32,767 之间的整数。 Ruby Array\n类在处理大量信息时效率很差，因此使用了此类。 超类：Object。\n"],["RGSS3::Tilemap","","RGSS3/Tilemap.html","","<p>管理元件地图的类。元件地图是显示二维游戏地图所使用的特殊概念，内部由多个精灵构成。 组成元件地图的每个精灵的 Z 坐标都是固定的。\n\n<pre>1.显示在角色之下的元件，其 Z 坐标为 0。\n2.显示在角色之上的元件，其 ...</pre>\n"],["RGSS3::Tone","","RGSS3/Tone.html","","<p>色调的类。各个属性以浮点数（Float）管理。 超类：Object。\n"],["RGSS3::Viewport","","RGSS3/Viewport.html","","<p>显示端口的类。用于只在画面的一部分显示精灵，而不影响其余部分。 超类：Object。\n"],["RGSS3::Window","","RGSS3/Window.html","","<p>游戏内窗口的类，内部由多个精灵构成。 超类：Object。\n"],["[]","RGSS3::Table","RGSS3/Table.html#method-i-5B-5D","(x, y = nil, z = nil)","<p>self self[x, y] self[x, y, z]\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">读取数组的元素。生成的数组有几维，该方法就接受几个参数。若指定的元素不存在则返回</span> <span class=\"ruby-identifier\">nil。</span>\n</pre>\n"],["[]=","RGSS3::Table","RGSS3/Table.html#method-i-5B-5D-3D","(x, y = nil, z = nil, value)","<p>self = value self[x, y] = value self[x, y, z] = value\n存入数组的元素。生成的数组有几维，该方法就接受几个参数。若指定的元素不存在则返回 nil。\n"],["bgm_fade","RGSS3::Audio","RGSS3/Audio.html#method-c-bgm_fade","(time)","<p>bgm_fade(time)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">开始淡出</span> <span class=\"ruby-constant\">BGM。time</span> <span class=\"ruby-identifier\">以毫秒为单位指定淡出需要的时间。</span>\n</pre>\n"],["bgm_play","RGSS3::Audio","RGSS3/Audio.html#method-c-bgm_play","(filename, volume = 100, pitch = 0, pos = 0)","<p>bgm_play(filename[, volume[, pitch[, pos]]])\n\n<pre>开始播放 BGM。依次指定文件名、音量、音调和起始位置。\n起始位置 (RGSS3) 只对 ogg 和 wav 有效。 ...</pre>\n"],["bgm_pos","RGSS3::Audio","RGSS3/Audio.html#method-c-bgm_pos","(time)","<p>bgm_pos(time)\n\n<pre>获取 BGM 的播放位置。只对 ogg 和 wav 有效。无效时返回 0。</pre>\n"],["bgm_stop","RGSS3::Audio","RGSS3/Audio.html#method-c-bgm_stop","()","<p>bgm_stop\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">停止播放</span> <span class=\"ruby-constant\">BGM。</span>\n</pre>\n"],["bgs_fade","RGSS3::Audio","RGSS3/Audio.html#method-c-bgs_fade","(time)","<p>bgs_fade(time)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">开始淡出</span> <span class=\"ruby-constant\">BGS。time</span> <span class=\"ruby-identifier\">以毫秒为单位指定淡出需要的时间。</span>\n</pre>\n"],["bgs_play","RGSS3::Audio","RGSS3/Audio.html#method-c-bgs_play","(filename, volume = 100, pitch = 0, pos = 0)","<p>bgs_play(filename[, volume[, pitch[, pos]]])\n\n<pre>开始播放 BGS。依次指定文件名、音量、音调和起始位置。\n起始位置 (RGSS3) 只对 ogg 和 wav 有效。 ...</pre>\n"],["bgs_pos","RGSS3::Audio","RGSS3/Audio.html#method-c-bgs_pos","(time)","<p>bgs_pos(time)\n\n<pre>获取 BGS 的播放位置。只对 ogg 和 wav 有效。无效时返回 0。</pre>\n"],["bgs_stop","RGSS3::Audio","RGSS3/Audio.html#method-c-bgs_stop","()","<p>bgs_stop\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">停止播放</span> <span class=\"ruby-constant\">BGS。</span>\n</pre>\n"],["blt","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-blt","(x, y, src_bitmap, src_rect, opacity = 255)","<p>blt(x, y, src_bitmap, src_rect[, opacity])   -&gt; nil\n\n<pre>将位图 src_bitmap 的矩形 src_rect（Rect）中的数据整体传送到当前位图的坐标 ...</pre>\n"],["blur","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-blur","()","<p>blur   -&gt; nil\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">对位图执行模糊效果。此处理需要花费时间。</span>\n</pre>\n"],["clear","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-clear","()","<p>clear   -&gt; nil\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">清除整个位图。</span>\n</pre>\n"],["clear_rect","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-clear_rect","(*args)","<p>clear_rect(x, y, width, height)   -&gt; nil\n\n<pre>清除位图的矩形 (x, y, width, height)。</pre>\n<p>clear_rect(rect)   -&gt; nil …\n"],["close?","RGSS3::Window","RGSS3/Window.html#method-i-close-3F","()","<p>close?\n\n<pre>如果窗口完全关闭（openness == 0）则返回 true。</pre>\n"],["dir4","RGSS3::Input","RGSS3/Input.html#method-c-dir4","()","<p>dir4\n\n<pre>判断方向键的状态，以 4 方向输入的形式，返回与小键盘上的数字对应的整数（2, 4, 6, 8）。\n没有方向键按下时（或等价的情况下）返回 0。</pre>\n"],["dir8","RGSS3::Input","RGSS3/Input.html#method-c-dir8","()","<p>dir8\n\n<pre>判断方向键的状态，以 8 方向输入的形式，返回与小键盘上的数字对应的整数（1, 2, 3, 4, 6, 7, 8, 9）。\n没有方向键按下时（或等价的情况下）返回 0。</pre>\n"],["dispose","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-dispose","()","<p>dispose    -&gt; nil\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">释放位图，若位图已释放，则什么都不做。</span>\n</pre>\n"],["dispose","RGSS3::Plane","RGSS3/Plane.html#method-i-dispose","()","<p>dispose\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">释放平面。若是已释放则什么都不做。</span>\n</pre>\n"],["dispose","RGSS3::Sprite","RGSS3/Sprite.html#method-i-dispose","()","<p>dispose\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">释放精灵。若是已释放则什么都不做。</span>\n</pre>\n"],["dispose","RGSS3::Tilemap","RGSS3/Tilemap.html#method-i-dispose","()","<p>dispose\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">释放元件地图。若是已经释放则什么都不做。</span>\n</pre>\n"],["dispose","RGSS3::Viewport","RGSS3/Viewport.html#method-i-dispose","()","<p>dispose\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">释放显示端口。若是已释放则什么都不做。</span>\n<span class=\"ruby-identifier\">该操作并不会自动释放其他关联的对象。</span>\n</pre>\n"],["dispose","RGSS3::Window","RGSS3/Window.html#method-i-dispose","()","<p>dispose\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">释放窗口。若是已释放则什么都不做。</span>\n</pre>\n"],["dispose?","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-dispose-3F","()","<p>dispose?    -&gt; nil\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">释放位图，若位图已释放，则什么都不做。</span>\n</pre>\n"],["disposed?","RGSS3::Plane","RGSS3/Plane.html#method-i-disposed-3F","()","<p>disposed?   -&gt; TrueClass or FalseClass\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">当平面已释放则返回</span> <span class=\"ruby-identifier\">true。</span>\n</pre>\n"],["disposed?","RGSS3::Sprite","RGSS3/Sprite.html#method-i-disposed-3F","()","<p>disposed?   -&gt; TrueClass or FalseClass\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">当精灵已释放则返回</span> <span class=\"ruby-identifier\">true。</span>\n</pre>\n"],["disposed?","RGSS3::Tilemap","RGSS3/Tilemap.html#method-i-disposed-3F","()","<p>disposed?   -&gt; TrueClass or FalseClass\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">若元件地图已释放则返回</span> <span class=\"ruby-identifier\">true。</span>\n</pre>\n"],["disposed?","RGSS3::Viewport","RGSS3/Viewport.html#method-i-disposed-3F","()","<p>disposed?   -&gt; TrueClass or FalseClass\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">当显示端口已释放则返回</span> <span class=\"ruby-identifier\">true。</span>\n</pre>\n"],["disposed?","RGSS3::Window","RGSS3/Window.html#method-i-disposed-3F","()","<p>disposed?\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">当窗口已释放则返回</span> <span class=\"ruby-identifier\">true。</span>\n</pre>\n"],["draw_text","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-draw_text","(*args)","<p>draw_text(x, y, width, height, str[, align])    -&gt; nil draw_text(rect,\nstr[, align])   -&gt; nil\n\n<pre>在位图的矩形 ...</pre>\n"],["empty","RGSS3::Rect","RGSS3/Rect.html#method-i-empty","()","<p>empty   -&gt; self\n\n<pre>将所有属性设置为 0。</pre>\n"],["fadein","RGSS3::Graphics","RGSS3/Graphics.html#method-c-fadein","(duration)","<p>fadein(duration)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">执行画面的淡入。</span>\n<span class=\"ruby-identifier\">duration</span> <span class=\"ruby-identifier\">是淡入花费的帧数。</span>\n</pre>\n"],["fadeout","RGSS3::Graphics","RGSS3/Graphics.html#method-c-fadeout","(duration)","<p>fadeout(duration)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">执行画面的淡出。</span>\n<span class=\"ruby-identifier\">duration</span> <span class=\"ruby-identifier\">是淡出花费的帧数。</span>\n</pre>\n"],["fill_rect","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-fill_rect","(*args)","<p>fill_rect(x, y, width, height, color)   -&gt; nil\n\n<pre>将位图的矩形 (x, y, width, height)填充指定的颜色 color（Color）。</pre>\n<p>fill_rect …\n"],["flash","RGSS3::Sprite","RGSS3/Sprite.html#method-i-flash","(color, duration)","<p>flash(color, duration)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">开始精灵闪烁。</span>\n<span class=\"ruby-identifier\">duration</span> <span class=\"ruby-identifier\">是指定闪烁的帧数。</span>\n<span class=\"ruby-identifier\">color</span> <span class=\"ruby-identifier\">若设为</span> <span class=\"ruby-identifier\">nil，闪烁时精灵会消失。</span>\n</pre>\n"],["flash","RGSS3::Viewport","RGSS3/Viewport.html#method-i-flash","(color, duration)","<p>flash(color, duration)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">开始闪烁显示端口。duration</span> <span class=\"ruby-identifier\">指定闪烁的帧数。</span>\n<span class=\"ruby-identifier\">若</span> <span class=\"ruby-identifier\">color</span> <span class=\"ruby-identifier\">设为</span> <span class=\"ruby-identifier\">nil，闪烁时显示端口会消失。</span>\n</pre>\n"],["frame_reset","RGSS3::Graphics","RGSS3/Graphics.html#method-c-frame_reset","()","<p>frame_reset\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">重置画面的更新时间。在执行耗时的处理之后，调用此方法可以避免严重的跳帧。</span>\n</pre>\n"],["freeze","RGSS3::Graphics","RGSS3/Graphics.html#method-c-freeze","()","<p>freeze\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">固定当前画面以准备渐变。</span>\n<span class=\"ruby-identifier\">在调用</span> <span class=\"ruby-identifier\">transition</span> <span class=\"ruby-identifier\">方法之前，禁止一切画面的重绘。</span>\n</pre>\n"],["get_pixel","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-get_pixel","(x, y)","<p>get_pixel(x, y)   -&gt; Color\n\n<pre>获取点 (x, y) 的颜色（Color）。</pre>\n"],["gradient_fill_rect","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-gradient_fill_rect","(*args)","<p>gradient_fill_rect(x, y, width, height, color1, color2[, vertical])   -&gt;\nnil\n\n<pre>将位图的矩形 (x, y, width, height)渐变填充颜色 ...</pre>\n"],["height","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-height","()","<p>height   -&gt; Integer\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">获取位图的高度。</span>\n</pre>\n"],["height","RGSS3::Graphics","RGSS3/Graphics.html#method-c-height","()","<p>height\n\n<pre>获取画面的高度。默认值为 416。</pre>\n"],["height","RGSS3::Sprite","RGSS3/Sprite.html#method-i-height","()","<p>height\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">获取精灵的高度，相当于</span> <span class=\"ruby-identifier\">src_rect</span>.<span class=\"ruby-identifier\">height。</span>\n</pre>\n"],["hue_change","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-hue_change","(hue)","<p>hue_change(hue)   -&gt; nil\n\n<pre>在 360 度内变换位图的色相。\n此处理需要花费时间。另外，由于转换误差，反复转换可能会导致色彩失真。</pre>\n"],["load_data","RGSS3","RGSS3.html#method-i-load_data","(filename)","<p>load_data(filename)   -&gt; Object\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">加载由</span> <span class=\"ruby-identifier\">filename</span> <span class=\"ruby-identifier\">指定的数据文件并还原成对象。</span>\n</pre>\n<p>example:\n"],["me_fade","RGSS3::Audio","RGSS3/Audio.html#method-c-me_fade","(time)","<p>me_fade(time)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">开始淡出</span> <span class=\"ruby-constant\">ME。time</span> <span class=\"ruby-identifier\">以毫秒为单位指定淡出需要的时间。</span>\n</pre>\n"],["me_play","RGSS3::Audio","RGSS3/Audio.html#method-c-me_play","(filename, volume = 100, pitch = 0)","<p>me_play(filename[, volume[, pitch[, pos]]])\n\n<pre>开始播放 ME。依次指定文件名、音量、音调和起始位置。\nRGSS-RTP 内的文件也会自动搜索。扩展名可以省略。\n播放 ...</pre>\n"],["me_stop","RGSS3::Audio","RGSS3/Audio.html#method-c-me_stop","()","<p>me_stop\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">停止播放</span> <span class=\"ruby-constant\">ME。</span>\n</pre>\n"],["move","RGSS3::Window","RGSS3/Window.html#method-i-move","(x, y, width, height)","<p>move(x, y, width, height)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">同时设置窗口的</span> <span class=\"ruby-constant\">X</span> <span class=\"ruby-identifier\">坐标、Y</span> <span class=\"ruby-identifier\">坐标、宽度、高度。</span>\n</pre>\n"],["msgbox","RGSS3","RGSS3.html#method-i-msgbox","(*args)","<p>msgbox(arg[, …])    -&gt; nil\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">将参数输出到对话框。如果参数并不是字符串，则会使用</span> <span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-identifier\">方法转换为字符串后再进行输出。</span>\n</pre>\n"],["msgbox_p","RGSS3","RGSS3.html#method-i-msgbox_p","(*args)","<p>msgbox_p(obj, [obj2, …])    -&gt; nil\n\n<pre>将 obj 以人类可读的格式输出到对话框，相当于下面的代码（参考 Object#inspect）。\nmsgbox obj.inspect, ...</pre>\n"],["new","RGSS3::Bitmap","RGSS3/Bitmap.html#method-c-new","(*args)","<p>Bitmap.new(filename)    -&gt; self\n\n<pre>载入由 filename 参数所指定的图像，生成一个 Bitmap 对象。\nRGSS-RTP 和加密档案中的文件会自动搜索。扩展名可以省略。</pre>\n"],["new","RGSS3::Color","RGSS3/Color.html#method-c-new","(red = 0, green = 0, blue = 0, alpha = 0)","<p>Color.new(red, green, blue[, alpha])    -&gt; self\n\n<pre>生成 Color 对象。alpha 值省略时使用 255。</pre>\n<p>Color.new   -&gt; self …\n"],["new","RGSS3::Plane","RGSS3/Plane.html#method-c-new","(viewport = nil)","<p>Plane.new()\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">生成一个</span> <span class=\"ruby-constant\">Plane</span> <span class=\"ruby-identifier\">对象。必要时指定一个显示端口（Viewport）。</span>\n</pre>\n"],["new","RGSS3::Rect","RGSS3/Rect.html#method-c-new","(x = 0, y = 0, width = 0, height = 0)","<p>Rect.new(x, y, width, height)\n\n<pre>创建一个 Rect 对象。未指定参数时，默认值为 (0, 0, 0, 0)。(RGSS3)</pre>\n"],["new","RGSS3::Sprite","RGSS3/Sprite.html#method-c-new","(viewport = nil)","<p>Sprite.new()\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">生成一个精灵对象。必要时指定一个显示端口（Viewport）。</span>\n</pre>\n"],["new","RGSS3::Table","RGSS3/Table.html#method-c-new","(xsize, ysize = nil, zsize = nil)","<p>Table.new(xsize[, ysize[, zsize]])\n\n<pre>生成 Table 对象。指定多维数组各维的长度。生成的数组可以是 1~3 维。生成没有元素的数组也可以。</pre>\n"],["new","RGSS3::Tilemap","RGSS3/Tilemap.html#method-c-new","(viewport = nil)","<p>Tilemap.new()\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">生成一个</span> <span class=\"ruby-constant\">Tilemap</span> <span class=\"ruby-identifier\">对象。必要时指定一个显示端口（Viewport）。</span>\n</pre>\n"],["new","RGSS3::Tone","RGSS3/Tone.html#method-c-new","(red = 0, green = 0, blue, gray = 0)","<p>Tone.new(red, green, blue[, gray])\n\n<pre>生成 Tone 对象。gray 值省略时使用 0。</pre>\n<p>Tone.new (RGSS3)\n"],["new","RGSS3::Viewport","RGSS3/Viewport.html#method-c-new","(viewport = nil)","<p>Viewport.new(x, y, width, height)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">生成</span> <span class=\"ruby-constant\">Viewport</span> <span class=\"ruby-identifier\">对象。</span>\n</pre>\n<p>Viewport.new(rect)\n"],["new","RGSS3::Window","RGSS3/Window.html#method-c-new","(x = 0, y = 0, width = 0, height = 0)","<p>Window.new([x, y, width, height]) 生成一个 Window 对象，根据需要指定位置与大小。\n"],["open?","RGSS3::Window","RGSS3/Window.html#method-i-open-3F","()","<p>open?\n\n<pre>如果窗口完全打开（openness == 255）则返回 true。</pre>\n"],["play_movie","RGSS3::Graphics","RGSS3/Graphics.html#method-c-play_movie","(filename)","<p>play_movie(filename)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">从文件名为</span> <span class=\"ruby-identifier\">filename</span> <span class=\"ruby-identifier\">的文件中播放视频。</span>\n<span class=\"ruby-identifier\">在播放结束后，才会返回。</span>\n</pre>\n"],["press?","RGSS3::Input","RGSS3/Input.html#method-c-press-3F","(sym)","<p>press?(sym)\n\n<pre>检测符号 sym 对应的按键当前是否被按下。\n如果按键被按下，则返回 true ，否则返回 false 。</pre>\n<p>example\n"],["radial_blur","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-radial_blur","(angle, division)","<p>radial_blur(angle, division)    -&gt; nil\n\n<pre>对位图执行放射型模糊。angle 指定 0~360 的角度，角度越大，效果越圆润。\ndivision 指定 2～100 ...</pre>\n"],["rect","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-rect","()","<p>rect   -&gt; Rect\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">获取位图的矩形（Rect）。</span>\n</pre>\n"],["repeat?","RGSS3::Input","RGSS3/Input.html#method-c-repeat-3F","(sym)","<p>repeat?(sym)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">检测符号</span> <span class=\"ruby-identifier\">sym</span> <span class=\"ruby-identifier\">对应的按键是否被重新按下。</span>\n<span class=\"ruby-identifier\">不同于</span> <span class=\"ruby-identifier\">trigger?</span> <span class=\"ruby-identifier\">，按住按键时会考虑按键的重复。</span>\n<span class=\"ruby-identifier\">如果按钮被重新按下，则返回</span> <span class=\"ruby-identifier\">true，如果不是，返回</span> <span class=\"ruby-identifier\">false。</span>\n</pre>\n<p>example …\n"],["resize","RGSS3::Table","RGSS3/Table.html#method-i-resize","(xsize, ysize = nil, zsize = nil)","<p>resize(xsize[, ysize[, zsize]])\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">更改数组的长度。保留更改前的数据。</span>\n</pre>\n"],["resize_screen","RGSS3::Graphics","RGSS3/Graphics.html#method-c-resize_screen","(width, height)","<p>resize_screen(width, height)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">修改画面的尺寸。</span>\n</pre>\n<p>width、height 指定宽度和高度，范围为 640×480。\n"],["rgss_main","RGSS3","RGSS3.html#method-i-rgss_main","(&block)","<p>rgss_main { … }\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">仅进行一次加载的函数。</span>\n<span class=\"ruby-identifier\">当检测到用户按下F12的时候，这个函数会被重置。</span>\n</pre>\n<p>example:\n"],["rgss_stop","RGSS3","RGSS3.html#method-i-rgss_stop","()","<p>rgss_stop { … }\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">停止脚本的执行，只保留画面的刷新。</span>\n</pre>\n"],["save_data","RGSS3","RGSS3.html#method-i-save_data","(obj, filename)","<p>save_data(obj, filename)    -&gt; nil\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">将对象</span> <span class=\"ruby-identifier\">obj</span> <span class=\"ruby-identifier\">写入名为</span> <span class=\"ruby-identifier\">filename</span> <span class=\"ruby-identifier\">的数据文件。</span>\n</pre>\n<p>example:\n"],["se_play","RGSS3::Audio","RGSS3/Audio.html#method-c-se_play","(filename, volume = 100, pitch = 0)","<p>se_play(filename[, volume[, pitch[, pos]]])\n\n<pre>开始播放 SE。依次指定文件名、音量、音调和起始位置。\nRGSS-RTP 内的文件也会自动搜索。扩展名可以省略。\n若是在极短时间内重复播放同一个 ...</pre>\n"],["se_stop","RGSS3::Audio","RGSS3/Audio.html#method-c-se_stop","()","<p>se_stop\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">停止播放</span> <span class=\"ruby-constant\">SE。</span>\n</pre>\n"],["set","RGSS3::Color","RGSS3/Color.html#method-i-set","(*args)","<p>set(red, green, blue[, alpha])  -&gt; self\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">一次设置所有属性。alpha默认值为255。</span>\n</pre>\n<p>set(color)   -&gt; self\n"],["set","RGSS3::Rect","RGSS3/Rect.html#method-i-set","(*args)","<p>set(x, y, width, height)  -&gt; self\n\n<pre>设置Rect的属性,一次设置所有属性。</pre>\n<p>set(rect)   -&gt; self\n"],["set","RGSS3::Tone","RGSS3/Tone.html#method-i-set","(*args)","<p>set(red, green, blue[, gray])\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">一次设置所有属性。</span>\n</pre>\n<p>set(tone)\n"],["set_pixel","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-set_pixel","(x, y, color)","<p>set_pixel(x, y, color)   -&gt; color\n\n<pre>设置点 (x, y) 的颜色（Color）。</pre>\n"],["setup_midi","RGSS3::Audio","RGSS3/Audio.html#method-c-setup_midi","()","<p>setup_midi\n\n<pre>执行 DirectMusic 播放 MIDI 的准备。\n方法化后，可以将 RGSS2 启动时执行的处理放在任意时机执行。\n不调用本方法也可以播放 MIDI，但是在 Windows Vista ...</pre>\n"],["snap_to_bitmap","RGSS3::Graphics","RGSS3/Graphics.html#method-c-snap_to_bitmap","()","<p>snap_to_bitmap\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">以位图对象的形式获取当前的游戏画面。</span>\n<span class=\"ruby-identifier\">即使以</span> <span class=\"ruby-identifier\">freeze</span> <span class=\"ruby-identifier\">方法固定图像，该方法也会获取当前本来应该显示的图像。</span>\n<span class=\"ruby-identifier\">生成的位图不再需要时，必须立刻释放位图。</span>\n</pre>\n"],["stretch_blt","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-stretch_blt","(dest_rect, src_bitmap, src_rect, opacity = 255)","<p>stretch_blt(dest_rect, src_bitmap, src_rect[, opacity])   -&gt; nil\n\n<pre>将位图 src_bitmap 的矩形 src_rect（Rect）中的数据整体传送到当前位图的矩形 ...</pre>\n"],["text_size","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-text_size","(str)","<p>text_size(str)    -&gt; Integer\n\n<pre>获取使用 draw_text 方法描绘字符串 str 时的矩形（Rect）。该区域不包含轮廓部分 (RGSS3) 和斜体的突出部分。\n若 str ...</pre>\n"],["transition","RGSS3::Graphics","RGSS3/Graphics.html#method-c-transition","(duration = 10, filename = nil, vague = 40)","<p>transition([duration[, filename[, vague]]])\n\n<pre>执行由 Graphics.freeze 方法固定的画面到当前画面的渐变。\nduration 是渐变花费的帧数，默认值为 ...</pre>\n"],["trigger?","RGSS3::Input","RGSS3/Input.html#method-c-trigger-3F","(sym)","<p>trigger?(sym)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">检测符号</span> <span class=\"ruby-identifier\">sym</span> <span class=\"ruby-identifier\">对应的按键是否被重新按下。</span>\n<span class=\"ruby-identifier\">从没有按下的状态转变为按下的瞬间才被视为「重新按下」。</span>\n<span class=\"ruby-identifier\">如果按钮被重新按下，则返回</span> <span class=\"ruby-identifier\">true，如果不是，返回</span> <span class=\"ruby-identifier\">false。</span>\n</pre>\n<p>example …\n"],["update","RGSS3::Graphics","RGSS3/Graphics.html#method-c-update","()","<p>update\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">更新游戏画面，推进一帧。该方法需要定期调用。</span>\n</pre>\n<p>example:\n"],["update","RGSS3::Input","RGSS3/Input.html#method-c-update","()","<p>update\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">更新输入信息。原则上一帧调用一次。</span>\n</pre>\n"],["update","RGSS3::Sprite","RGSS3/Sprite.html#method-i-update","()","<p>update\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">更新精灵的闪烁或波的相位。原则上，此方法一帧调用一次。</span>\n<span class=\"ruby-identifier\">若是没有使用闪烁或波动效果，则无须调用此方法。</span>\n</pre>\n"],["update","RGSS3::Tilemap","RGSS3/Tilemap.html#method-i-update","()","<p>update\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">更新自动元件的动画等等。原则上，此方法一帧调用一次。</span>\n</pre>\n"],["update","RGSS3::Viewport","RGSS3/Viewport.html#method-i-update","()","<p>update\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">更新显示端口的闪烁。原则上，此方法一帧调用一次。</span>\n<span class=\"ruby-identifier\">若是没有使用闪烁效果，则无须调用此方法。</span>\n</pre>\n"],["update","RGSS3::Window","RGSS3/Window.html#method-i-update","()","<p>update\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">刷新光标的闪烁和暂停标记的动画。该方法原则上每帧调用一次。</span>\n</pre>\n"],["wait","RGSS3::Graphics","RGSS3/Graphics.html#method-c-wait","(duration)","<p>wait(duration)\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">等待指定的帧数，与下面的代码等效：</span>\n<span class=\"ruby-identifier\">duration</span>.<span class=\"ruby-identifier\">times</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-constant\">Graphics</span>.<span class=\"ruby-identifier\">update</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["width","RGSS3::Bitmap","RGSS3/Bitmap.html#method-i-width","()","<p>width   -&gt; Integer\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">获取位图的宽度。</span>\n</pre>\n"],["width","RGSS3::Graphics","RGSS3/Graphics.html#method-c-width","()","<p>width\n\n<pre>获取画面的宽度。默认值为 544。</pre>\n"],["width","RGSS3::Sprite","RGSS3/Sprite.html#method-i-width","()","<p>width\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">获取精灵的宽度，相当于</span> <span class=\"ruby-identifier\">src_rect</span>.<span class=\"ruby-identifier\">width。</span>\n</pre>\n"],["xsize","RGSS3::Table","RGSS3/Table.html#method-i-xsize","()","<p>xsize\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">获取数组</span> <span class=\"ruby-constant\">X</span> <span class=\"ruby-identifier\">维的长度。</span>\n</pre>\n"],["ysize","RGSS3::Table","RGSS3/Table.html#method-i-ysize","()","<p>ysize\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">获取数组</span> <span class=\"ruby-constant\">Y</span> <span class=\"ruby-identifier\">维的长度。</span>\n</pre>\n"],["zsize","RGSS3::Table","RGSS3/Table.html#method-i-zsize","()","<p>zsize\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">获取数组</span> <span class=\"ruby-constant\">Z</span> <span class=\"ruby-identifier\">维的长度。</span>\n</pre>\n"]]}}